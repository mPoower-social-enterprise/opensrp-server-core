<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="org.opensrp.repository.postgres.mapper.custom.CustomMhealthEventMapper">

	
    <sql id="Base_Column_List">    
        e.id, e.json, e.date_deleted, e.server_version
    </sql>

    <select id="selectByDocumentId" parameterType="java.lang.String"
		resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from core.event${postfix} e
		WHERE json ->> 'id' = #{documentId,jdbcType=VARCHAR} and date_deleted is null
    </select>


    <insert id="insertSelectiveAndSetId" parameterType="org.opensrp.domain.postgres.MhealthEvent"
		useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into core.event
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="json != null">
				json,
			</if>
			server_version,
			<if test="baseEntityId != null">
				base_entity_id,
			</if>
			<if test="district != null">
				district,
			</if>
			<if test="division != null">
				division,
			</if>
			<if test="branch != null">
				branch,
			</if>
			<if test="village != null">
				village,
			</if>
			<if test="providerId != null">
				provider_id,
			</if>
			<if test="eventType != null">
				event_type,
			</if>
			<if test="formSubmissionId != null">
				form_submission_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="json != null">
				#{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.EventTypeHandler},
			</if>
			nextVal('core.event_server_version_seq'),
			<if test="baseEntityId != null">
				#{baseEntityId,jdbcType=VARCHAR},
			</if>
			<if test="district != null">
				#{district,jdbcType=VARCHAR},
			</if>
			<if test="division != null">
				#{division,jdbcType=VARCHAR},
			</if>
			<if test="branch != null">
				#{branch,jdbcType=VARCHAR},
			</if>
			<if test="village != null">
				#{village,jdbcType=VARCHAR},
			</if>
			<if test="providerId != null">
				#{providerId,jdbcType=VARCHAR},
			</if>
			<if test="eventType != null">
				#{eventType,jdbcType=VARCHAR},
			</if>
			<if test="formSubmissionId != null">
				#{formSubmissionId,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeyAndGenerateServerVersion" parameterType="org.opensrp.domain.postgres.MhealthEvent">
	   update core.event
	   set json = #{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.EventTypeHandler},
	     date_deleted = #{dateDeleted,jdbcType=TIMESTAMP},
	     server_version = nextVal('core.event_server_version_seq'),
	     base_entity_id = #{baseEntityId,jdbcType=VARCHAR},
	     district = #{district,jdbcType=VARCHAR},
	     division = #{division,jdbcType=VARCHAR},
	     branch = #{branch,jdbcType=VARCHAR},
	     village = #{village,jdbcType=VARCHAR},
	     provider_id = #{providerId,jdbcType=VARCHAR},
	     event_type = #{eventType,jdbcType=VARCHAR},
	     form_submission_id = #{formSubmissionId,jdbcType=VARCHAR}
	   where id = #{id,jdbcType=BIGINT}
 	</update>

	<select id="selectServerVersionByPrimaryKey"
		parameterType="java.lang.Long" resultType="long">
		select server_version from core.event${postfix} where id = #{id,jdbcType=BIGINT}
	</select>
	
    <select id="selectByIdentifier" parameterType="java.lang.String"
		resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from core.event e
		join jsonb_each_text(core.event.json ->
		'identifiers') j
		on true
		where j.value = #{identifier,jdbcType=VARCHAR} and date_deleted is null
    </select>
	
    <update id="updateByPrimaryKeySelective" parameterType="org.opensrp.domain.postgres.MhealthEvent">
    update core.event
    <set>
      <if test="json != null">
        json = #{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.EventTypeHandler},
      </if>
      <if test="dateDeleted != null">
        date_deleted = #{dateDeleted,jdbcType=TIMESTAMP},
      </if>
      <if test="serverVersion != null">
        server_version = #{serverVersion,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectEventIdByFormSubmissionId" 
		resultType="java.lang.Long">
		select event_id
		from core.event_metadata${postfix} em
		where em.form_submission_id = #{formSubmissionId,jdbcType=VARCHAR} and em.date_deleted is null limit 1
    </select>
    <select id="selectEventIdByDocumentId" 
		resultType="java.lang.Long">
		select event_id
		from core.event_metadata${postfix} em
		where em.document_id = #{documentId,jdbcType=VARCHAR} and em.date_deleted is null limit 1
    </select>
    <select id="selectEventByEventId" resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from core.event${postfix} e
		where e.id = #{eventId} limit 1
    </select>
    
    <select id="selectByVillageIds"
			resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
		select <include refid="Base_Column_List" />
		FROM core.event${postfix} e , core.event_metadata${postfix} em where e.id=em.event_id
		and em.server_version::BIGINT >= #{serverVersion,jdbcType=BIGINT}  and
		em.base_entity_id=any(
		select base_entity_id from core.client_metadata${postfix}
		where

		<if test="villageIds != null">
			village_id=any(array
			<foreach close="]" collection="villageIds" item="listItem" open="[" separator=",">
				#{listItem}
			</foreach>
			)
		</if>
		)
		order by em.server_version asc
		LIMIT #{limit}

	</select>
    <select id="selectByProvider" resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
        with em as (
            select event_id from core.event_metadata${postfix} em
                where em.provider_id=#{providerId,jdbcType=VARCHAR}
                and em.server_version::BIGINT >= #{serverVersion,jdbcType=BIGINT}
        )
        select e.id,e.json from core.event${postfix} e 
        where e.id=any(select event_id from em ) order by e.server_version asc
    </select>
    <select id="selectByBaseEntityId"
		resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from core.event${postfix} e
		where e.base_entity_id = #{baseEntityId,jdbcType=VARCHAR} limit 1
	</select>
	<select id="selectByFormSubmissionId"
		resultMap="org.opensrp.repository.postgres.mapper.EventMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from core.event${postfix} e
		where e.form_submission_id = #{formSubmissionId,jdbcType=VARCHAR} limit 1
	</select>

</mapper>
